version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ebay_scanner_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ebay_scanner
      POSTGRES_USER: ebay_user
      POSTGRES_PASSWORD: ebay_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ebay_user -d ebay_scanner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # eBay Scanner Web Application
  web:
    build: .
    container_name: ebay_scanner_web
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: db
      DB_NAME: ebay_scanner
      DB_USER: ebay_user
      DB_PASSWORD: ebay_password
      
      # eBay API Configuration (from .env file)
      EBAY_CLIENT_ID: ${EBAY_CLIENT_ID}
      EBAY_CLIENT_SECRET: ${EBAY_CLIENT_SECRET}
      EBAY_APP_ID: ${EBAY_APP_ID}
      EBAY_DEV_ID: ${EBAY_DEV_ID}
      
      # Flask Configuration
      FLASK_ENV: production
      FLASK_DEBUG: 0
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c 'import time; import psycopg2; 
        while True:
          try: 
            psycopg2.connect(host=\"db\", database=\"ebay_scanner\", user=\"ebay_user\", password=\"ebay_password\"); 
            print(\"Database ready!\"); 
            break
          except: 
            print(\"Database not ready, waiting...\"); 
            time.sleep(2)' &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting application...' &&
        gunicorn --bind 0.0.0.0:5000 --workers 2 --timeout 60 app:app
      "

  # eBay Scanner Background Worker (for scheduled tasks)
  worker:
    build: .
    container_name: ebay_scanner_worker
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: db
      DB_NAME: ebay_scanner
      DB_USER: ebay_user
      DB_PASSWORD: ebay_password
      
      # eBay API Configuration
      EBAY_CLIENT_ID: ${EBAY_CLIENT_ID}
      EBAY_CLIENT_SECRET: ${EBAY_CLIENT_SECRET}
      EBAY_APP_ID: ${EBAY_APP_ID}
      EBAY_DEV_ID: ${EBAY_DEV_ID}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: python scout.py

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: ebay_scanner_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
